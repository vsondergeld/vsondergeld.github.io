bottom5_table
flextable_save_aurora(bottom5_table, path = here("graphs","bottom5_table.png"))
View(bottom5)
View(jobcounts_winter_sect)
display_names<-read.csv("categories_display_names.csv")%>%
select(glue::glue('{display_language}'),name)%>%
rename(normtitlecategory_consistent=name)%>%
filter(!normtitlecategory_consistent=="")
jobcounts_winter_sect <- jobcounts_winter %>%
left_join(display_names) %>%
filter(!normtitlecategory_consistent=="NA",!normtitlecategory_consistent=="") %>%
mutate(pct_diff_dec1to15=index-100)
top5 <- jobcounts_winter_sect %>%
filter(fake_date=='2010-01-31',season =='latest_season') %>%
ungroup() %>%
top_n(5,pct_diff_dec1to15) %>%
select(glue::glue('{display_language}'),pct_diff_dec1to15) %>%
rename(Sector=(glue::glue('{display_language}')),
"% change in postings"=pct_diff_dec1to15)
top5_table<-top5 %>%
arrange(`% change in postings`)%>%
ungroup()%>%
arrange(desc(`% change in postings`))%>%
flextable_aurora(
title=(glue::glue("Sectors with the largest increase in postings as of January 31, {current_year}",
subtitle="Compared to average of Dec 1 to 15, {previous_year}")),
pct_cols = c(2:2))
top5_table
flextable_save_aurora(top5_table, path = here("graphs","top5_table.png"))
top5_list <- jobcounts_winter_sect %>%
filter(fake_date == '2010-01-31', season == 'latest_season') %>%
ungroup() %>%
top_n(5, pct_diff_dec1to15) %>%
pull(glue::glue('{display_language}'))
top5_list <- top5 %>%
pull(Sector)
View(top5)
overall_posts<-ggplot(data=filter(jobcounts_winter, key==100, fake_date >= '2009-12-15'),
aes(fake_date, index, group = as.factor(season), color=as.factor(season)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
overall_posts
display_names<-read.csv("categories_display_names.csv")%>%
select(glue::glue('{display_language}'),name)%>%
rename(normtitlecategory_consistent=name)%>%
filter(!normtitlecategory_consistent=="")
jobcounts_winter_sect <- jobcounts_winter %>%
left_join(display_names) %>%
filter(!normtitlecategory_consistent=="NA",!normtitlecategory_consistent=="") %>%
mutate(pct_diff_dec1to15=index-100)
top5 <- jobcounts_winter_sect %>%
filter(fake_date=='2010-01-31',season =='latest_season') %>%
ungroup() %>%
top_n(5,pct_diff_dec1to15) %>%
select(glue::glue('{display_language}'),pct_diff_dec1to15) %>%
rename(Sector=(glue::glue('{display_language}')),
"% change in postings"=pct_diff_dec1to15)
top5_table<-top5 %>%
arrange(`% change in postings`)%>%
ungroup()%>%
arrange(desc(`% change in postings`))%>%
flextable_aurora(
title=(glue::glue("Sectors with the largest increase in postings as of January 31, {current_year}",
subtitle="Compared to average of Dec 1 to 15, {previous_year}")),
pct_cols = c(2:2))
top5_table
flextable_save_aurora(top5_table, path = here("graphs","top5_table.png"))
jobcounts_winter <- total_job_counts %>%
filter(!is.na(season),) %>%
mutate(year=as.numeric(format(day, "%Y")))%>%
select(fake_date, season, normtitlecategory_consistent, seven_day_avg, year)
# create indexed job posting variable: indexes to the average seven_day_avg job postings from 1 to 15 Dec, equals 100 from 1 to 15 Dec accordingly
jobcounts_winter <- jobcounts_winter %>%
group_by(normtitlecategory_consistent,season)%>%
mutate(index = ifelse(fake_date >= '2009-12-01' & fake_date <= '2009-12-15',
100,
seven_day_avg / mean(seven_day_avg[fake_date >= '2009-12-01' & fake_date <= '2009-12-15']) * 100))
overall_posts<-ggplot(data=filter(jobcounts_winter, key==100, fake_date >= '2009-12-15'),
aes(fake_date, index, group = as.factor(season), color=as.factor(season)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
overall_posts
display_names<-read.csv("categories_display_names.csv")%>%
select(glue::glue('{display_language}'),name)%>%
rename(normtitlecategory_consistent=name)%>%
filter(!normtitlecategory_consistent=="")
jobcounts_winter_sect <- jobcounts_winter %>%
left_join(display_names) %>%
filter(!normtitlecategory_consistent=="NA",!normtitlecategory_consistent=="") %>%
mutate(pct_diff_dec1to15=index-100)
top5 <- jobcounts_winter_sect %>%
filter(fake_date=='2010-01-31',season ==latest_season) %>%
ungroup() %>%
top_n(5,pct_diff_dec1to15) %>%
select(glue::glue('{display_language}'),pct_diff_dec1to15) %>%
rename(Sector=(glue::glue('{display_language}')),
"% change in postings"=pct_diff_dec1to15)
top5_table<-top5 %>%
arrange(`% change in postings`)%>%
ungroup()%>%
arrange(desc(`% change in postings`))%>%
flextable_aurora(
title=(glue::glue("Sectors with the largest increase in postings as of January 31, {current_year}",
subtitle="Compared to average of Dec 1 to 15, {previous_year}")),
pct_cols = c(2:2))
top5_table
flextable_save_aurora(top5_table, path = here("graphs","top5_table.png"))
bottom5 <- jobcounts_winter_sect %>%
filter(fake_date=='2010-01-31',season ==latest_season) %>%
ungroup() %>%
top_n(-5,pct_diff_dec1to15) %>%
select(glue::glue('{display_language}'),pct_diff_dec1to15) %>%
rename(Sector=(glue::glue('{display_language}')),
"% change in postings"=pct_diff_dec1to15)
bottom5_table<-bottom5 %>%
arrange(`% change in postings`)%>%
ungroup()%>%
flextable_aurora(
title=(glue::glue("Sectors with the largest decrease in postings as of January 31, {current_year}",
subtitle="Compared to average of Dec 1 to 15, {previous_year}")),
pct_cols = c(2:2))
bottom5_table
flextable_save_aurora(bottom5_table, path = here("graphs","bottom5_table.png"))
top5_list <- top5 %>%
pull(Sector)
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(glue::glue('{display_language}') %in% top5_list,season ==latest_season) %>%
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(glue::glue('{display_language}') %in% top5_list,season ==latest_season)
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(glue::glue('{display_language}') %in% top5_list)
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(glue::glue('{display_language}') %in% top5_list,season ==latest_season)
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
top5_posts
View(top5_graph)
View(top5_posts)
View(top5_graph)
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
top5_posts
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season)
bottom5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
top5_posts
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season)
bottom5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
bottom5_posts
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season)
bottom5_posts <-ggplot(data=bottom5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
bottom5_posts
jobcounts_winter <- total_job_counts %>%
filter(!is.na(season),) %>%
mutate(year=as.numeric(format(day, "%Y")))%>%
select(fake_date, season, normtitlecategory_consistent, seven_day_avg, year)
# create indexed job posting variable: indexes to the seven_day_avg job postings on 15 Dec, equals 100 from 1 to 15 Dec accordingly
jobcounts_winter <- jobcounts_winter %>%
group_by(normtitlecategory_consistent,season)%>%
mutate(index = ifelse(fake_date >= '2009-12-01' & fake_date <= '2009-12-15',
100,
seven_day_avg / mean(seven_day_avg[fake_date >= '2009-12-15' & fake_date <= '2009-12-15']) * 100))
overall_posts<-ggplot(data=filter(jobcounts_winter, key==100, fake_date >= '2009-12-15'),
aes(fake_date, index, group = as.factor(season), color=as.factor(season)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
overall_posts
display_names<-read.csv("categories_display_names.csv")%>%
select(glue::glue('{display_language}'),name)%>%
rename(normtitlecategory_consistent=name)%>%
filter(!normtitlecategory_consistent=="")
jobcounts_winter_sect <- jobcounts_winter %>%
left_join(display_names) %>%
filter(!normtitlecategory_consistent=="NA",!normtitlecategory_consistent=="") %>%
mutate(pct_diff_dec1to15=index-100)
top5 <- jobcounts_winter_sect %>%
filter(fake_date=='2010-01-31',season ==latest_season) %>%
ungroup() %>%
top_n(5,pct_diff_dec1to15) %>%
select(glue::glue('{display_language}'),pct_diff_dec1to15) %>%
rename(Sector=(glue::glue('{display_language}')),
"% change in postings"=pct_diff_dec1to15)
top5_table<-top5 %>%
arrange(`% change in postings`)%>%
ungroup()%>%
arrange(desc(`% change in postings`))%>%
flextable_aurora(
title=(glue::glue("Sectors with the largest increase in postings as of January 31, {current_year}",
subtitle="Compared to average of Dec 1 to 15, {previous_year}")),
pct_cols = c(2:2))
top5_table
flextable_save_aurora(top5_table, path = here("graphs","top5_table.png"))
bottom5 <- jobcounts_winter_sect %>%
filter(fake_date=='2010-01-31',season ==latest_season) %>%
ungroup() %>%
top_n(-5,pct_diff_dec1to15) %>%
select(glue::glue('{display_language}'),pct_diff_dec1to15) %>%
rename(Sector=(glue::glue('{display_language}')),
"% change in postings"=pct_diff_dec1to15)
bottom5_table<-bottom5 %>%
arrange(`% change in postings`)%>%
ungroup()%>%
flextable_aurora(
title=(glue::glue("Sectors with the largest decrease in postings as of January 31, {current_year}",
subtitle="Compared to average of Dec 1 to 15, {previous_year}")),
pct_cols = c(2:2))
bottom5_table
flextable_save_aurora(bottom5_table, path = here("graphs","bottom5_table.png"))
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(92, 105), expand = expansion(mult = c(0, .05)))
top5_posts
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season)
bottom5_posts <-ggplot(data=bottom5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100")
bottom5_posts
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season)
bottom5_posts <-ggplot(data=bottom5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(80, 105), expand = expansion(mult = c(0, .05)))
bottom5_posts
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season)
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 15, index = 100") +
scale_y_continuous(limits = c(85, 105), expand = expansion(mult = c(0, .05)))
top5_posts
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season)
bottom5_posts <-ggplot(data=bottom5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1-15, index = 100") +
scale_y_continuous(limits = c(85, 105), expand = expansion(mult = c(0, .05)))
bottom5_posts
View(top5)
View(top5_graph)
View(jobcounts_winter_sect)
bottom5_list <- bottom5 %>%
pull(Sector)
bottom5_graph <- jobcounts_winter_sect %>%
filter(en %in% bottom5_list,season ==latest_season, fake_date>='2009-12-15')
bottom5_posts <-ggplot(data=bottom5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 1, index = 100") +
scale_y_continuous(limits = c(85, 105), expand = expansion(mult = c(0, .05)))
bottom5_posts
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season, fake_date>='2009-12-15')
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to the average of Dec 15, index = 100") +
scale_y_continuous(limits = c(85, 105), expand = expansion(mult = c(0, .05)))
top5_posts
top5_list <- top5 %>%
pull(Sector)
top5_graph <- jobcounts_winter_sect %>%
filter(en %in% top5_list,season ==latest_season, fake_date>='2009-12-15')
top5_posts <-ggplot(data=top5_graph,
aes(fake_date, index, group = as.factor(normtitlecategory_consistent), color=as.factor(normtitlecategory_consistent)))+
geom_hline(yintercept = 100, linetype = "dashed") +
geom_line_hl() +
theme_aurora() +
scale_color_aurora()+
labs(title=paste("Job posting index (7-days average) from Dec to Feb in", country),
subtitle="Indexed to Dec 15, index = 100") +
scale_y_continuous(limits = c(85, 105), expand = expansion(mult = c(0, .05)))
top5_posts
all_searches <-iql2(glue("FROM jobsearch {start_date} {end_date} as desk,
mobsearch as mob
WHERE rcv='jsv' grp!='spider' grp!='privileged' rcv='interaction'
js_ip_country_code != '' js_ip_country_code != 'unknown'
page=1 country='{iql_country}'
GROUP BY time(1d)
SELECT desk.count() AS desk_all,
mob.count() as mob_all",
authentication='basic'))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(aws.s3, glue, here, hltable,hlplot, iqlr, jpir, lubridate, noctua, scales, tidyverse, zoo)
options(scipen = 999)
options(digits=2)
system("tokentamer savecreds --account=682914981783 --cloud-access-role=ct-hiring-lab-qa-user --profile-name default")
con <- jpi_athena_connect()
economist_pathname <- "/Users/vsondergeld/Library/CloudStorage/GoogleDrive-vsondergeld@indeed.com/.shortcut-targets-by-id/0B4byl40PAof9ZFBjN0N4c3hWNXc/Hiring Lab/"
all_searches <-iql2(glue("FROM jobsearch {start_date} {end_date} as desk,
mobsearch as mob
WHERE rcv='jsv' grp!='spider' grp!='privileged' rcv='interaction'
js_ip_country_code != '' js_ip_country_code != 'unknown'
page=1 country='{iql_country}'
GROUP BY time(1d)
SELECT desk.count() AS desk_all,
mob.count() as mob_all",
authentication='basic'))
all_searches <-iql2(glue("FROM jobsearch {start_date} {end_date} as desk,
mobsearch as mob
WHERE rcv='jsv' grp!='spider' grp!='privileged' rcv='interaction'
js_ip_country_code != '' js_ip_country_code != 'unknown'
page=1 country='{iql_country}'
GROUP BY time(1d)
SELECT desk.count() AS desk_all,
mob.count() as mob_all",
authentication='basic'))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(aws.s3, glue, here, hltable,hlplot, iqlr, jpir, lubridate, noctua, scales, tidyverse, zoo)
options(scipen = 999)
options(digits=2)
system("tokentamer savecreds --account=682914981783 --cloud-access-role=ct-hiring-lab-qa-user --profile-name default")
con <- jpi_athena_connect()
economist_pathname <- "/Users/vsondergeld/Library/CloudStorage/GoogleDrive-vsondergeld@indeed.com/.shortcut-targets-by-id/0B4byl40PAof9ZFBjN0N4c3hWNXc/Hiring Lab/"
country<-c("US")
iql_country<-c("us")
display_language<-"en"
# start date: the first year to look at
start_date<-'2018-12-01'
# end dates: where are we now?
end_date<-'2024-02-01'
end_date_table<-"2024-01-31"
current_year<-'2024'
last_year<-'2023'
latest_season <- "2023-24"
jpi_externally_available_normcats <- aws.s3::s3read_using(
FUN = readr::read_csv,
object = "s3://hl-data-products/mappings/normcat-filter.csv"
) %>%
mutate(jpi_normcats = 1)%>%
filter(jobcountry %in% c(glue::glue("{country}")))
jpi_externally_available_normcats_vect<-as.vector(jpi_externally_available_normcats$normtitlecategory_consistent)
#### tbd with country economists, what needs to be excluded for each country
# job posting index 01/02/2020 onward
if (!exists("raw_jpi_national")) {
raw_jpi_national <- aws.s3::s3read_using(FUN = read.csv,
bucket = "s3://hl-data-products",
object = "job-postings-index/production/postings-national.csv")
}
raw_jpi_national_country <- raw_jpi_national%>%
filter(jobcountry %in% c(glue::glue("{country}")),
normtitlecategory_consistent %in% c(jpi_externally_available_normcats_vect, "overall")) %>%
rename(job_count=count) %>%
rename(day=modified_date) %>%
select(day,jobcountry,normtitlecategory_consistent,key,job_count)
# pre 01/02/2020 data
searchablejobs_ave <- jpi_get_searchablejobs(con)%>%
dplyr::filter(normtitlecategory_consistent %in% c(jpi_externally_available_normcats_vect),
day >= as.character(start_date), day <as.character("2020-02-01"),
jobcountry %in% country)%>%
group_by(modified_date, jobcountry) %>%
summarize(job_count = n()) %>%
mutate(key=100, normtitlecategory_consistent="overall")%>%
select(modified_date, jobcountry, key, normtitlecategory_consistent,job_count)%>%
rename(day=modified_date)%>%
collect()
